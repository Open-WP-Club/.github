name: Update plugins.csv

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  actions: read
  checks: read
  deployments: read
  issues: read
  packages: read
  pull-requests: read
  repository-projects: read
  security-events: read
  statuses: read

jobs:
  update-plugins-csv:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub requests

      - name: Update plugins.csv
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<EOF
          import os
          import csv
          from github import Github
          from github import GithubException

          def debug_print(message):
              print(f"DEBUG: {message}")

          # Initialize GitHub client
          g = Github(os.environ['GITHUB_TOKEN'])

          # Get the current repository
          repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
          debug_print(f"Current repository: {repo.full_name}")

          # Get the Open-WP-Club organization
          org = g.get_organization('Open-WP-Club')
          debug_print(f"Organization: {org.login}")

          # Define blocklist
          blocklist = ['plugin-hub', '.github', 'security-checker']

          # Get all repositories
          repos = list(org.get_repos())
          debug_print(f"Total repositories: {len(repos)}")

          # Prepare CSV data
          csv_data = [['repo-name', 'Display Name', 'Description', 'Version', 'Repo URL']]

          for repo in repos:
              if repo.name not in blocklist:
                  # Get the latest release version
                  try:
                      latest_release = repo.get_latest_release()
                      version = latest_release.tag_name.lstrip('v')
                  except:
                      version = 'N/A'

                  # Append repo data to CSV data
                  csv_data.append([
                      repo.name,
                      repo.name.replace('-', ' ').title(),  # Display Name
                      repo.description or 'No description available',
                      version,
                      repo.html_url
                  ])

          debug_print(f"CSV data prepared with {len(csv_data) - 1} entries")

          # Convert CSV data to string
          csv_content = '\n'.join([','.join(row) for row in csv_data])

          # Function to safely get file contents
          def safe_get_contents(repo, path, ref):
              try:
                  return repo.get_contents(path, ref=ref)
              except GithubException as e:
                  if e.status == 404:
                      return None
                  raise

          # Check if file exists and get its SHA
          file_content = safe_get_contents(repo, 'plugins.csv', 'main')
          
          if file_content is not None:
              debug_print("plugins.csv exists, updating file")
              debug_print(f"File SHA: {file_content.sha}")
              try:
                  repo.update_file(
                      path='plugins.csv',
                      message='Update plugins.csv',
                      content=csv_content,
                      sha=file_content.sha,
                      branch='main'
                  )
                  print("plugins.csv has been updated successfully.")
              except Exception as e:
                  debug_print(f"Error updating file: {str(e)}")
                  raise
          else:
              debug_print("plugins.csv does not exist, creating new file")
              try:
                  repo.create_file(
                      path='plugins.csv',
                      message='Create plugins.csv',
                      content=csv_content,
                      branch='main'
                  )
                  print("plugins.csv has been created successfully.")
              except Exception as e:
                  debug_print(f"Error creating file: {str(e)}")
                  raise

          debug_print("Script completed successfully")
          EOF